{"ast":null,"code":"var _jsxFileName = \"/home/jhonatan/Documentos/gifexpert/src/Components/GifGrid.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getGifs } from '../Helpers/getGifs';\nimport { GridItem } from './GridItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const GifGrid = ({\n  category\n}) => {\n  /* const [counts,setCounts]=useState(0) */\n  // const [images,setImages]=useState([])\n  // useEffect(()=>{\n  //  getGifs(category)\n  //  /* .then(imgs=>setImages(imgs)) */\n  //  .then(setImages)\n  // },[category])\n\n  /* const getGifs = async() => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=W9lzd20ZUMcW0YG3ntVBABpVh0RqpQvB`\n  const resp = await fetch(url)\n  const {data} = await resp.json()\n  \n  const gifs = data.map(img=>{\n      return {\n          id: img.id,\n          title: img.title,\n          url: img.images?.downsized_medium.url\n      }\n  })\n  console.log(gifs)\n  setImages(gifs)\n  } */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: images.map(img => /*#__PURE__*/_jsxDEV(GridItem, { ...img\n        }, img.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 20\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_c = GifGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GifGrid\");","map":{"version":3,"sources":["/home/jhonatan/Documentos/gifexpert/src/Components/GifGrid.js"],"names":["React","useState","useEffect","getGifs","GridItem","GifGrid","category","images","map","img","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAEA,OAAO,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAEvC;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,sBACI;AAAA,4BACA;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BAGG;AAAA,kBAEKC,MAAM,CAACC,GAAP,CAAWC,GAAG,iBACX,QAAC,QAAD,OAEIA;AAFJ,WACKA,GAAG,CAACC,EADT;AAAA;AAAA;AAAA;AAAA,gBADH;AAFL;AAAA;AAAA;AAAA;AAAA;AAHH;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADJ;AAkBH,CA7CM;KAAML,O","sourcesContent":["import React, {useState,useEffect } from 'react'\nimport { getGifs } from '../Helpers/getGifs'\nimport { GridItem } from './GridItem'\n\nexport const GifGrid = ({category}) => {\n\n/* const [counts,setCounts]=useState(0) */\n// const [images,setImages]=useState([])\n\n// useEffect(()=>{\n//  getGifs(category)\n//  /* .then(imgs=>setImages(imgs)) */\n//  .then(setImages)\n// },[category])\n\n/* const getGifs = async() => {\nconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=W9lzd20ZUMcW0YG3ntVBABpVh0RqpQvB`\nconst resp = await fetch(url)\nconst {data} = await resp.json()\n\nconst gifs = data.map(img=>{\n    return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n    }\n})\nconsole.log(gifs)\nsetImages(gifs)\n} */\n\n    return (\n        <>\n        <h3>{category}</h3>\n        <div className=\"card-grid\"> \n          {/*  <h3>{counts}</h3>\n           <button onClick={()=>setCounts(counts+1)}></button> */}\n           <ol>\n               {\n                images.map(img => (\n                   <GridItem \n                   key={img.id}\n                   {...img}/>\n                ))\n               }\n           </ol>\n        </div>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}